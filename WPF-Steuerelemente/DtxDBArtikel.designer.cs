#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.4200
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF_Steuerelemente
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DBArtikel")]
	public partial class DtxDBArtikelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLieferanten(Lieferanten instance);
    partial void UpdateLieferanten(Lieferanten instance);
    partial void DeleteLieferanten(Lieferanten instance);
    partial void InsertArtikel(Artikel instance);
    partial void UpdateArtikel(Artikel instance);
    partial void DeleteArtikel(Artikel instance);
    partial void InsertProdukte(Produkte instance);
    partial void UpdateProdukte(Produkte instance);
    partial void DeleteProdukte(Produkte instance);
    #endregion
		
		public DtxDBArtikelDataContext() : 
				base(global::WPF_Steuerelemente.Properties.Settings.Default.DBArtikelConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DtxDBArtikelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DtxDBArtikelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DtxDBArtikelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DtxDBArtikelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Lieferanten> Lieferanten
		{
			get
			{
				return this.GetTable<Lieferanten>();
			}
		}
		
		public System.Data.Linq.Table<Artikel> Artikel
		{
			get
			{
				return this.GetTable<Artikel>();
			}
		}
		
		public System.Data.Linq.Table<Produkte> Produkte
		{
			get
			{
				return this.GetTable<Produkte>();
			}
		}
	}
	
	[Table(Name="dbo.Lieferanten")]
	public partial class Lieferanten : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _lfnr;
		
		private string _name;
		
		private string _email;
		
		private string _plz;
		
		private EntitySet<Artikel> _Artikel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlfnrChanging(int value);
    partial void OnlfnrChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnplzChanging(string value);
    partial void OnplzChanged();
    #endregion
		
		public Lieferanten()
		{
			this._Artikel = new EntitySet<Artikel>(new Action<Artikel>(this.attach_Artikel), new Action<Artikel>(this.detach_Artikel));
			OnCreated();
		}
		
		[Column(Storage="_lfnr", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int lfnr
		{
			get
			{
				return this._lfnr;
			}
			set
			{
				if ((this._lfnr != value))
				{
					this.OnlfnrChanging(value);
					this.SendPropertyChanging();
					this._lfnr = value;
					this.SendPropertyChanged("lfnr");
					this.OnlfnrChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(1000)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="VarChar(1000)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_plz", DbType="NChar(5)")]
		public string plz
		{
			get
			{
				return this._plz;
			}
			set
			{
				if ((this._plz != value))
				{
					this.OnplzChanging(value);
					this.SendPropertyChanging();
					this._plz = value;
					this.SendPropertyChanged("plz");
					this.OnplzChanged();
				}
			}
		}
		
		[Association(Name="Lieferanten_Artikel", Storage="_Artikel", ThisKey="lfnr", OtherKey="lfnr")]
		public EntitySet<Artikel> Artikel
		{
			get
			{
				return this._Artikel;
			}
			set
			{
				this._Artikel.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artikel(Artikel entity)
		{
			this.SendPropertyChanging();
			entity.Lieferanten = this;
		}
		
		private void detach_Artikel(Artikel entity)
		{
			this.SendPropertyChanging();
			entity.Lieferanten = null;
		}
	}
	
	[Table(Name="dbo.Artikel")]
	public partial class Artikel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _artnr;
		
		private int _lfnr;
		
		private int _pnr;
		
		private System.Nullable<int> _vorrat;
		
		private System.Nullable<decimal> _preis;
		
		private EntityRef<Lieferanten> _Lieferanten;
		
		private EntityRef<Produkte> _Produkte;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnartnrChanging(int value);
    partial void OnartnrChanged();
    partial void OnlfnrChanging(int value);
    partial void OnlfnrChanged();
    partial void OnpnrChanging(int value);
    partial void OnpnrChanged();
    partial void OnvorratChanging(System.Nullable<int> value);
    partial void OnvorratChanged();
    partial void OnpreisChanging(System.Nullable<decimal> value);
    partial void OnpreisChanged();
    #endregion
		
		public Artikel()
		{
			this._Lieferanten = default(EntityRef<Lieferanten>);
			this._Produkte = default(EntityRef<Produkte>);
			OnCreated();
		}
		
		[Column(Storage="_artnr", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int artnr
		{
			get
			{
				return this._artnr;
			}
			set
			{
				if ((this._artnr != value))
				{
					this.OnartnrChanging(value);
					this.SendPropertyChanging();
					this._artnr = value;
					this.SendPropertyChanged("artnr");
					this.OnartnrChanged();
				}
			}
		}
		
		[Column(Storage="_lfnr", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int lfnr
		{
			get
			{
				return this._lfnr;
			}
			set
			{
				if ((this._lfnr != value))
				{
					if (this._Lieferanten.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlfnrChanging(value);
					this.SendPropertyChanging();
					this._lfnr = value;
					this.SendPropertyChanged("lfnr");
					this.OnlfnrChanged();
				}
			}
		}
		
		[Column(Storage="_pnr", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pnr
		{
			get
			{
				return this._pnr;
			}
			set
			{
				if ((this._pnr != value))
				{
					if (this._Produkte.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpnrChanging(value);
					this.SendPropertyChanging();
					this._pnr = value;
					this.SendPropertyChanged("pnr");
					this.OnpnrChanged();
				}
			}
		}
		
		[Column(Storage="_vorrat", DbType="Int")]
		public System.Nullable<int> vorrat
		{
			get
			{
				return this._vorrat;
			}
			set
			{
				if ((this._vorrat != value))
				{
					this.OnvorratChanging(value);
					this.SendPropertyChanging();
					this._vorrat = value;
					this.SendPropertyChanged("vorrat");
					this.OnvorratChanged();
				}
			}
		}
		
		[Column(Storage="_preis", DbType="Money")]
		public System.Nullable<decimal> preis
		{
			get
			{
				return this._preis;
			}
			set
			{
				if ((this._preis != value))
				{
					this.OnpreisChanging(value);
					this.SendPropertyChanging();
					this._preis = value;
					this.SendPropertyChanged("preis");
					this.OnpreisChanged();
				}
			}
		}
		
		[Association(Name="Lieferanten_Artikel", Storage="_Lieferanten", ThisKey="lfnr", OtherKey="lfnr", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lieferanten Lieferanten
		{
			get
			{
				return this._Lieferanten.Entity;
			}
			set
			{
				Lieferanten previousValue = this._Lieferanten.Entity;
				if (((previousValue != value) 
							|| (this._Lieferanten.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lieferanten.Entity = null;
						previousValue.Artikel.Remove(this);
					}
					this._Lieferanten.Entity = value;
					if ((value != null))
					{
						value.Artikel.Add(this);
						this._lfnr = value.lfnr;
					}
					else
					{
						this._lfnr = default(int);
					}
					this.SendPropertyChanged("Lieferanten");
				}
			}
		}
		
		[Association(Name="Produkte_Artikel", Storage="_Produkte", ThisKey="pnr", OtherKey="pnr", IsForeignKey=true)]
		public Produkte Produkte
		{
			get
			{
				return this._Produkte.Entity;
			}
			set
			{
				Produkte previousValue = this._Produkte.Entity;
				if (((previousValue != value) 
							|| (this._Produkte.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Produkte.Entity = null;
						previousValue.Artikel.Remove(this);
					}
					this._Produkte.Entity = value;
					if ((value != null))
					{
						value.Artikel.Add(this);
						this._pnr = value.pnr;
					}
					else
					{
						this._pnr = default(int);
					}
					this.SendPropertyChanged("Produkte");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Produkte")]
	public partial class Produkte : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pnr;
		
		private string _name;
		
		private EntitySet<Artikel> _Artikel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpnrChanging(int value);
    partial void OnpnrChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Produkte()
		{
			this._Artikel = new EntitySet<Artikel>(new Action<Artikel>(this.attach_Artikel), new Action<Artikel>(this.detach_Artikel));
			OnCreated();
		}
		
		[Column(Storage="_pnr", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pnr
		{
			get
			{
				return this._pnr;
			}
			set
			{
				if ((this._pnr != value))
				{
					this.OnpnrChanging(value);
					this.SendPropertyChanging();
					this._pnr = value;
					this.SendPropertyChanged("pnr");
					this.OnpnrChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(1000)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="Produkte_Artikel", Storage="_Artikel", ThisKey="pnr", OtherKey="pnr")]
		public EntitySet<Artikel> Artikel
		{
			get
			{
				return this._Artikel;
			}
			set
			{
				this._Artikel.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artikel(Artikel entity)
		{
			this.SendPropertyChanging();
			entity.Produkte = this;
		}
		
		private void detach_Artikel(Artikel entity)
		{
			this.SendPropertyChanging();
			entity.Produkte = null;
		}
	}
}
#pragma warning restore 1591
